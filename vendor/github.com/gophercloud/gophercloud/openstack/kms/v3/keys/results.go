package keys

import (
	"github.com/gophercloud/gophercloud"
)


type commonResult struct {
	gophercloud.Result
}

// Key contains all the information associated with a CMK.
type Key struct {
	// Current ID of a CMK
	KeyID string `json:"key_id"`
	// ID of a user domain for the key.
	DomainID string `json:"domain_id"`
	// Alias of a CMK
	KeyAlias string `json:"key_alias"`
	// Region where a CMK resides
	Realm string `json:"realm"`
	// Description of a CMK
	KeyDescription string `json:"key_description"`
	// Creation time (time stamp) of a CMK
	CreationDate string `json:"creation_date"`
	// Scheduled deletion time (time stamp) of a CMK
	ScheduledDeletionDate string `json:"scheduled_deletion_date"`
	// State of a CMK
	KeyState string `json:"key_state"`
	// Identification of a Master Key. The value 1 indicates a Default
	// Master Key, and the value 0 indicates a CMK
	DefaultKeyFlag string `json:"default_key_flag"`
	// Type of a CMK
	KeyType string `json:"key_type"`
	// Expiration time
	ExpirationTime string `json:"expiration_time"`
	// Origin of a CMK. The default value is kms. The following values
	// are enumerated: kms indicates that the CMK material is generated by KMS.
	Origin string `json:"origin"`
	KeyRotationEnabled string `json:"key_rotation_enabled"`

}

// CreateResult contains the response body and error from a Create request.
type CreateResult struct {
	commonResult
}

// GetResult contains the response body and error from a Get request.
type GetResult struct {
	commonResult
}

// DeleteResult contains the response body and error from a Delete request.
type DeleteResult struct {
	commonResult
}

// UpdateAliasResult contains the response body and error from a UpdateAlias request.
type UpdateAliasResult struct {
	commonResult
}

// UpdateDesResult contains the response body and error from a UpdateDes request.
type UpdateDesResult struct {
	commonResult
}

func (r commonResult) Extract() (*Key, error) {
	var s *Key
	err := r.ExtractInto(&s)
	return s, err
}

func (r commonResult) ExtractKeyInfo() (*Key, error) {
	var s Key
	err := r.ExtractKeyInfoInto(&s)
	return &s, err
}

func (r commonResult) ExtractKeyInfoInto(v interface{}) error {
	return r.Result.ExtractIntoStructPtr(v, "key_info")
}
